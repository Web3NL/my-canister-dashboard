# Use pinned Ubuntu image and install dfx 0.27.0 for deterministic builds
# To update SHA256: docker pull ubuntu:24.04 && docker inspect ubuntu:24.04 | grep -A1 RepoDigests
FROM ubuntu:24.04@sha256:b59d21599a2b151e23eea5f6602f4af4d7d31c4e236d22bf0b62b86d2e386b8f AS builder

WORKDIR /app

# Install dependencies, Rust, and dfx
RUN apt-get update && apt-get install -y \
    curl \
    ca-certificates \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Install Rust toolchain
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/root/.cargo/bin:$PATH"

# Set default toolchain and add WASM target
RUN rustup default stable
RUN rustup target add wasm32-unknown-unknown

# Install dfx 0.27.0 using specific version
RUN DFX_VERSION=0.27.0 && \
    curl -fsSL "https://github.com/dfinity/sdk/releases/download/${DFX_VERSION}/dfx-${DFX_VERSION}-x86_64-linux.tar.gz" | tar -xz -C /usr/local/bin/ && \
    chmod +x /usr/local/bin/dfx

# Set environment variables for dfx
ENV DFX_TELEMETRY_DISABLED=1
ENV DFX_WARNING=-mainnet_plaintext_identity

# Copy project files (build context is now parent directory)

COPY my-dashboard-wasm /app/my-dashboard-wasm
WORKDIR /app/my-dashboard-wasm

# Build the canister using cargo (more deterministic than dfx)
RUN cargo build --target wasm32-unknown-unknown --release --package my-dashboard-wasm && \
    mkdir -p /app/.dfx/local/canisters/my-dashboard-wasm && \
    cp target/wasm32-unknown-unknown/release/my_dashboard_wasm.wasm /app/.dfx/local/canisters/my-dashboard-wasm/my-dashboard-wasm.wasm

# Use SHA256-pinned Alpine image for deterministic final stage
# To update: docker pull alpine:3.19 && docker inspect alpine:3.19 | grep -A1 RepoDigests
FROM alpine:3.19@sha256:e5d0aea7f7d2954678a9a6269ca2d06e06591881161961ea59e974dff3f12377

# Create non-root user in final stage
RUN addgroup -g 1001 -S appuser && adduser -S appuser -u 1001

# Create wasm directory with proper ownership
RUN mkdir -p /wasm && chown -R appuser:appuser /wasm

# Copy built WASM files from builder stage  
COPY --from=builder --chown=appuser:appuser /app/.dfx/local/canisters/my-dashboard-wasm/my-dashboard-wasm.wasm /wasm/

USER appuser

CMD ["ls", "-la", "/wasm"]