name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-format:
    name: Lint and Format
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: 'canister-dashboard-frontend/package-lock.json'
          
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            canister-dashboard-rs/target
            my-empty-wasm/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
            
      - name: Install frontend dependencies
        run: cd canister-dashboard-frontend && npm ci
        
      - name: Run frontend lint and format
        run: ./scripts/frontend-lint-format.sh
        
      - name: Run rust lint and format  
        run: ./scripts/rust-lint-format.sh

  deterministic-build:
    name: Deterministic Build Verification
    runs-on: ubuntu-latest
    needs: lint-and-format
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: 'canister-dashboard-frontend/package-lock.json'
          
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            canister-dashboard-rs/target
            my-empty-wasm/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
        
      - name: Install DFX
        uses: dfinity/setup-dfx@main
        
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Install frontend dependencies
        run: cd canister-dashboard-frontend && npm ci
        
      - name: Store committed hashes for comparison
        run: |
          # Store the committed hashes before they get overwritten by the build
          cp canister-dashboard-rs/checksums/hashes.txt /tmp/committed-frontend-hashes.txt
          cp my-empty-wasm/checksums/hashes.txt /tmp/committed-wasm-hashes.txt
        
      - name: Run frontend lint and format
        run: ./scripts/frontend-lint-format.sh
        
      - name: Run rust lint and format  
        run: ./scripts/rust-lint-format.sh
        
      - name: Frontend deterministic build
        run: cd canister-dashboard-frontend && npm run build:deterministic && cd ..
        
      - name: WASM deterministic build
        run: cd my-empty-wasm && ./build-deterministic.sh && cd ..
          
      - name: Verify deterministic builds match committed hashes
        run: |
          echo "üîç Verifying deterministic builds produced the same hashes as committed..."
          
          # Compare the newly generated hashes with the committed ones
          FRONTEND_COMMITTED_HASHES="/tmp/committed-frontend-hashes.txt"
          FRONTEND_GENERATED_HASHES="canister-dashboard-rs/checksums/hashes.txt"
          WASM_COMMITTED_HASHES="/tmp/committed-wasm-hashes.txt"
          WASM_GENERATED_HASHES="my-empty-wasm/checksums/hashes.txt"
          
          echo "Verifying frontend hashes..."
          if ! diff -u "$FRONTEND_COMMITTED_HASHES" "$FRONTEND_GENERATED_HASHES"; then
            echo "‚ùå ERROR: Frontend build produced different hashes than committed!"
            echo ""
            echo "Committed frontend hashes:"
            cat "$FRONTEND_COMMITTED_HASHES"
            echo ""
            echo "Generated frontend hashes:"
            cat "$FRONTEND_GENERATED_HASHES"
            exit 1
          else
            echo "‚úÖ Frontend hashes match committed hashes!"
          fi
          
          echo ""
          echo "Verifying WASM hashes..."
          if ! diff -u "$WASM_COMMITTED_HASHES" "$WASM_GENERATED_HASHES"; then
            echo "‚ùå ERROR: WASM build produced different hashes than committed!"
            echo ""
            echo "Committed WASM hashes:"
            cat "$WASM_COMMITTED_HASHES"
            echo ""
            echo "Generated WASM hashes:"
            cat "$WASM_GENERATED_HASHES"
            exit 1
          else
            echo "‚úÖ WASM hashes match committed hashes!"
          fi
          
          echo ""
          echo "üéâ All deterministic builds verified successfully!"