name: CI

on:
  push:
    tags:
      - '*'

jobs:
  lint-and-format:
    name: Lint and Format
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: 'canister-dashboard-frontend/package-lock.json'
          
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            my-dashboard-wasm/target
            my-empty-wasm/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
            
      - name: Install frontend dependencies
        run: cd canister-dashboard-frontend && npm ci
        
      - name: Run frontend lint and format
        run: ./scripts/frontend-lint-format.sh
        
      - name: Run rust lint and format  
        run: ./scripts/rust-lint-format.sh

  deterministic-build:
    name: Deterministic Build Verification
    runs-on: ubuntu-latest
    needs: lint-and-format
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: 'canister-dashboard-frontend/package-lock.json'
          
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            my-dashboard-wasm/target
            my-empty-wasm/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
        
      - name: Install DFX
        uses: dfinity/setup-dfx@main
        
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Install frontend dependencies
        run: cd canister-dashboard-frontend && npm ci
        
      - name: Run deterministic build and hash verification
        run: ./scripts/github-deterministic-build.sh